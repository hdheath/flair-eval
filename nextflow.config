// Example configuration overrides for the flair_eval workflow

params {
    // Optional fallback conda environment when --conda_env is not provided
    default_conda_env = 'flair'

    // Dataset profiles defined in datasets.config
    datasets = ['human', 'A549_cDNA']

    // Flair align command templates rendered per dataset
    flair_align_commands = [
        "flair align -r {reads} -g {genome}",
        "flair align -r {reads} -g {genome} --nvrna"
    ]

    // Regionalize commands applied to each align result
    regionalize_commands = [
        "--all",
        "--region chr3:100000-101000",
        "--region chr1:1-100000"
    ]

    // Flair correct command templates rendered per regionalize result
    flair_correct_commands = [
        "flair correct -q {correct_bed} -g {genome} -f {gtf} --genome {genome}"
    ]

    // Flair transcriptome command templates rendered per regionalize result
    flair_transcriptome_commands = [
        // "flair transcriptome -g {genome} -b {transcriptome_bam}"
    ]

    // Flair collapse command templates rendered per correct result
    flair_collapse_commands = [
        "flair collapse -g {genome} -q {collapse_bed} -r {collapse_reads}"
    ]
}

// Base configuration wiring modular configs together (migrated from nextflow.config)
[
    results_dir                 : 'results',
    dataset                     : 'default',
    reads                       : null,
    genome                      : null,
    gtf                         : null,
    junctions                   : null,
    alignments                  : 'alignments.bam',
    alignment                   : null,
    cage                        : null,
    quantseq                    : null,
    target_regions              : null,
    conda_env                   : null,
    default_conda_env           : null,
    flair_align_commands        : null,
    flair_correct_commands      : null,
    flair_transcriptome_commands: null,
    flair_collapse_commands     : null,
    datasets_config             : null,
    regionalize_commands        : null,
    sqanti_conda                : null,
    sqanti_container            : null
].each { key, value ->
    if (!params.containsKey(key)) {
        params[key] = value
    }
}

process {
    executor = 'slurm'
    queue    = 'medium'
    cpus     = 4
    memory   = '4 GB'
    time     = '1h'

    withName: 'flair_eval:MaterializeDatasetSpec' {
        cpus   = 2
        memory = '4 GB'
        time   = '30m'
        queue  = 'medium'
    }

    withName: 'flair_eval:RunFlairAlign' {
        cpus   = 8
        memory = '32 GB'
        time   = '4h'
        queue  = 'medium'
    }

    withName: 'flair_eval:RunFlairCorrect' {
        cpus   = 4
        memory = '10 GB'
        time   = '4h'
        queue  = 'medium'
    }

    withName: 'flair_eval:RunFlairCollapse' {
        cpus   = 4
        memory = '10 GB'
        time   = '4h'
        queue  = 'medium'
    }

    withName: 'flair_eval:RunFlairTranscriptome' {
        cpus   = 4
        memory = '10 GB'
        time   = '4h'
        queue  = 'medium'
    }
}

conda {
    enabled = true
}

singularity {
    enabled    = true
    autoMounts = true
}

profiles {
    slurm {
        // Additional SLURM tweaks can go here if needed
    }
}

// Bring in dataset-specific parameter bundles and test-case definitions
def datasetsConfigUnderConfigs = new File("${baseDir}/configs/datasets.config")
def datasetsConfigAtRoot       = new File("${baseDir}/datasets.config")

if (datasetsConfigUnderConfigs.exists()) {
    includeConfig datasetsConfigUnderConfigs.toString()
} else if (datasetsConfigAtRoot.exists()) {
    includeConfig datasetsConfigAtRoot.toString()
} else {
    log.warn "No datasets.config found under configs/ or project root; dataset params will stay at defaults."
}
// includeConfig 'configs/test_cases.config'
